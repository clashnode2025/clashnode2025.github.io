<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://clashnode2025.github.io/news/article-64361.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashnode2025/favicon.ico" type="image/x-icon"/>
    <title>源码中的设计模式&#8211;装饰器模式_在线工具</title>
        <meta name="description" content="有一句很经典的小品台词是“换个马甲我就不认识你了吗”，哈哈，这个比方正好用在今天要分享的装饰器模式上。先看下《head first 设计模式》中给的释义。  装饰者模式&nbsp; 动态地将责任附加到" />
    
    <meta name="author" content="ClashNode2025订阅分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnode2025.github.io/news/article-64361.htm" />
    <meta property="og:site_name" content="ClashNode2025订阅分享站" />
    <meta property="og:title" content="源码中的设计模式&#8211;装饰器模式_在线工具" />
    <meta property="og:image" content="https://clashnode2025.github.io/uploads/20240303/c0ed41dad363898b3bc564a242037c9e.webp" />
        <meta property="og:release_date" content="2025-02-28T06:55:44" />
    <meta property="og:updated_time" content="2025-02-28T06:55:44" />
        <meta property="og:description" content="有一句很经典的小品台词是“换个马甲我就不认识你了吗”，哈哈，这个比方正好用在今天要分享的装饰器模式上。先看下《head first 设计模式》中给的释义。  装饰者模式&nbsp; 动态地将责任附加到" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="源码中的设计模式&#8211;装饰器模式_在线工具">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/aos.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-J2T7JR2LXH"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-J2T7JR2LXH');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Clash Node 2025</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">新闻资讯</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/website/img/clashnode2025/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">源码中的设计模式&#8211;装饰器模式_在线工具</h1>
                    </div>

                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>有一句很经典的小品台词是“换个马甲我就不认识你了吗”，哈哈，这个比方正好用在今天要分享的装饰器模式上。先看下《head first 设计模式》中给的释义。</p> <blockquote> <p><strong><span style="font-size: 18pt">装饰者模式</span></strong>&nbsp; 动态地将责任附加到对象上。若要扩展功能，装饰者提供了比基层更有弹性的替代方案。</p> </blockquote> <p>细心的小伙伴发现了这个释义怎么是装饰者模式，今天说的不是装饰器模式吗，其实这两个名称所代表的意思是一样的，为了保持和书上一致这里是装饰者模式，后续统一称为装饰器。</p> <p>这个释义太抽象太理论了，下面通俗的讲下。说到“装饰”二字，肯定第一时间想到的就是要有装饰者和被装饰者，正如前面说到的“换个马甲我就不认识你了吗”，这里的马甲可以理解为装饰者，穿马甲的就是被装饰者，放到装饰器模式里稍微有些不同，我们继续往下说。“装饰”，可以简单的理解为“伪装”，可以伪装成另外一个样子，也可以伪装成某种不同于原物的一种行为，所以在装饰者和被装饰者之间肯定存在某种相似，才可以使用装饰物去装饰被装饰者。用在java的设计模式中，我们讲的更多的是行为，也就是一个类所能完成的操作是可以用来装饰的。</p> <p>下面简单的根据一个UML图来了解下装饰器模式，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bd17abc4908a0a7925ebc15eb3b1ee34.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>上图中Component是一个接口，有两个方法methodA、methodB，有三个实现类ComponentA、ComponentB、ComponentDecoratorA，可以看到ComponentDecoratorA和其他两个实现类是不一样的，它有一个Component的属性，其他的从UML中看不出其他，当然在methodA、methodB方法中别有洞天，后面会说到。这里的CompoentDecoratorA其实就是一个装饰器类，任何实现了Component接口的类，都可以被它装饰，完成相应的功能。</p> <p><strong>可以看到装饰器模式中有实现（继承），还有组合。</strong></p> </h1> <p>上面对装饰器模式已经大体有了一个了解，下面通过一个具体的例子来实现一个简单的装饰器模式。</p> <p>Component.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">interface</span><span style="color: rgba(0, 0, 0, 1)"> Component {     String methodA(String params);</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB(); }</span></pre> </div> <p>ComponentA.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ComponentA<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Component{     //返回字符串     @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String methodA(String params) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> "ComponentA methodA"<span style="color: rgba(0, 0, 0, 1)">;     }     //打印字符串     @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB() {         System.out.println(</span>"ComponentA methodB"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>ComponentB.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ComponentB<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Component{</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">返回字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String methodA(String params) {</span><span style="color: rgba(0, 0, 255, 1)">return</span> "ComponentB methodA"<span style="color: rgba(0, 0, 0, 1)">;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">打印字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB() {         System.out.println(</span>"ComponentB methodB"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>ComponentDecoratorA.java</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> ComponentDecoratorA<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Component{</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Component的实例</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Component component;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">构造函数</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> ComponentDecoratorA(Component component){</span><span style="color: rgba(0, 0, 255, 1)">this</span>.component=<span style="color: rgba(0, 0, 0, 1)">component;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用component的methodA方法，返回字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> String methodA(String params) {         String decoratorStr</span>=<span style="color: rgba(0, 0, 0, 1)">component.methodA(params);</span><span style="color: rgba(0, 0, 255, 1)">return</span> "ComponentDecoratorA methodA,"+<span style="color: rgba(0, 0, 0, 1)">decoratorStr;     }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">调用component的methodB方法，打印字符串</span><span style="color: rgba(0, 0, 0, 1)">    @Override</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> methodB() {         component.methodB();         System.out.println(</span>"ComponentDecoratorA methodB"<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>下面看测试代码，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">package</span><span style="color: rgba(0, 0, 0, 1)"> com.example.decorator;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> TestDecorator {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> main(String[] args) {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">一个Component实例，被包装的实例</span>         Component component=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ComponentA();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用ComponentDecoratorA进行包装</span>         Component component1=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ComponentDecoratorA(component);         String str</span>=component1.methodA(""<span style="color: rgba(0, 0, 0, 1)">);         System.out.println(str);     } }</span></pre> </div> <p>看下测试结果，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">ComponentDecoratorA methodA,ComponentA methodA  Process finished with exit code</span>0</pre> </div> <p>符合测试预期。</p> <p>很简单吧，这就是装饰器模式，总结以下要点，</p> <p><strong>1、装饰者和被装饰者要实现统一的接口；</strong></p> <p><strong>2、在装饰者对象中持有被装饰者的对象实例；</strong></p> <p><strong>3、在装饰者行为中，主动调用被装饰者行为；</strong></p> <p>很多小伙伴会问，装饰者和被装饰者必须实现统一的接口(interface)吗，使用抽象类可以吗，其实是可以的，上述的接口可以理解为接口和抽象类，我们说只要他们有共同的行为即可，不必太拘泥于定义。</p> <p>另外，<strong>在装饰器模式中，运用了实现（继承）和组合设计原则</strong>。</p> </h1> <p>上面我们已经学会了使用装饰器模式，让我们继续在源码中找寻它的影子，学习下优秀的人是怎么使用装饰器模式的，让我们的代码越来越好。</p> <h2>1、java文件系统</h2> <p>在Java实现的API中已经有了装饰器模式的使用，而且在日常开发中很常用，不知道你注意到没有，如果没有下次在使用文件操作类的时候可以留心下哦。</p> <p>在java的文件系统中，有字节流和字符流，又分为输入和输出，分别是InputStream、OutputStream、Reader、Writer。以InputStream来举例吧，在inputStream下有一个FilterInputStream，这是一个抽象类，该类便是一个装饰者类的接口，装饰所有实现了InputStream的类，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/07094dd8c3eada864b90af5e702f2b05.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>另外，这里的InputStream是抽象类，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/4d741288645ca0e3bf09cb2f36fbefed.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>看下其重要的read方法，在装饰者FilterInputStream中是怎么实现的，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/874a8d0357e43d42b7e040bc82a33b85.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>可以看到调用的是具体被装饰者的read方法，由于FilterInputStream是抽象的，我们看下其具体的一个实现类也就是具体的一个装饰者的实现，看下BufferedInputStream，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> BufferedInputStream<span style="color: rgba(0, 0, 255, 1)">extends</span><span style="color: rgba(0, 0, 0, 1)"> FilterInputStream {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">默认的缓冲大小</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">int</span> DEFAULT_BUFFER_SIZE = 8192<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">最大</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">static</span><span style="color: rgba(0, 0, 255, 1)">int</span> MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">缓存区</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">volatile</span><span style="color: rgba(0, 0, 255, 1)">byte</span><span style="color: rgba(0, 0, 0, 1)"> buf[];</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> count;</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> pos;</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span> markpos = -1<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">protected</span><span style="color: rgba(0, 0, 255, 1)">int</span><span style="color: rgba(0, 0, 0, 1)"> marklimit;</span><span style="color: rgba(0, 128, 0, 1)">/**</span><span style="color: rgba(0, 128, 0, 1)">      * Creates a &lt;code&gt;BufferedInputStream&lt;/code&gt;      * and saves its  argument, the input stream      * &lt;code&gt;in&lt;/code&gt;, for later use. An internal      * buffer array is created and  stored in &lt;code&gt;buf&lt;/code&gt;.      *      *</span><span style="color: rgba(128, 128, 128, 1)">@param</span><span style="color: rgba(0, 128, 0, 1)">   in   the underlying input stream.</span><span style="color: rgba(0, 128, 0, 1)">*/</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> BufferedInputStream(InputStream in) {</span><span style="color: rgba(0, 0, 255, 1)">this</span><span style="color: rgba(0, 0, 0, 1)">(in, DEFAULT_BUFFER_SIZE);     }</span></pre> </div> <p>该类的代码有删改，可以看到BufferedInputStream中定义了很多属性，这些数据都是为了可缓冲读取来作准备的，看到其有构造方法会传入一个InputStream的实例。实际编码如下</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">被装饰的对象，文件输入流</span> InputStream in=<span style="color: rgba(0, 0, 255, 1)">new</span> FileInputStream("/root/doc/123.txt"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">装饰对象，可缓冲</span> InputStream bufferedIn=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> BufferedInputStream(in); bufferedIn.read();</span></pre> </div> <p>上面的代码便使用的装饰器模式进行的可缓冲的文件读取，代码很眼熟吧，其实你已经使用了装饰器模式。</p> <p>上面仅是拿InputStream进行了举例说明其实，在java的IO系统中，FilterInputStream、FilterOutputStream、FilterReader、FilterWriter抽象类都是装饰器模式的体现，其抽象类的子类都是装饰者类。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/bdff61d44e9e3d1029b8bacf43573e45.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <h2>2、mybatis缓存系统</h2> <p>mybatis自带一级缓存，其缓存设计就是使用的装饰器模式，我们先来看下其cache接口</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/e2c4695f31eab5e82e4fd6e449fe21c2.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>上图红框中标出的是Cache接口的直接实现PerpetualCache，这个类可以作为被装饰者，再看其他的实现均在org.apache.ibatis.cache.decorators包中，那么也就是装饰者，看下LruCache的实现，仅贴出部分代码，</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span> LruCache<span style="color: rgba(0, 0, 255, 1)">implements</span><span style="color: rgba(0, 0, 0, 1)"> Cache {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">Cache实例</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">final</span><span style="color: rgba(0, 0, 0, 1)"> Cache delegate;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">实现LRU算法的辅助map</span><span style="color: rgba(0, 0, 255, 1)">private</span> Map&lt;Object, Object&gt;<span style="color: rgba(0, 0, 0, 1)"> keyMap;</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Object eldestKey;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">构造函数，传入一个Cache，用来初始胡delegate和其他参数</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> LruCache(Cache delegate) {</span><span style="color: rgba(0, 0, 255, 1)">this</span>.delegate =<span style="color: rgba(0, 0, 0, 1)"> delegate;</span><span style="color: rgba(0, 0, 255, 1)">this</span>.setSize(1024<span style="color: rgba(0, 0, 0, 1)">);     } }</span></pre> </div> <p>这个代码和最开始演示的Component的那个例子很像，至于LRU缓存怎么实现的，各位小伙伴可以自行了解。下次再使用到mybatis的缓存，你就可以自豪的说这是装饰器模式。</p> <h2>3、mybatis的Executor执行器</h2> <p>在mybatis中真正负责执行sql语句的是Executor接口，</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/49da0ed5c48100c7fd53a8c278502323.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>该接口有以下几个实现类：CachingExecutor、BaseExecutor、SimpleExecutor等，重点看下CachingExecutor、SimpleExecutor</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/2f4706c7804d0fc1656834d74b5c059e.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>CachingExecutor应该是装饰者，看下SimpleExecutor</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/a088e2d633a02651d6a4e59df06915ca.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></p> <p>这个应该是被装饰者，它在执行具体的操作。</p> </h1> <p>本文分享了装饰器模式及在源码中的使用，需要几种以下几点，</p> <p><strong>1、装饰者和被装饰者要实现统一的接口；</strong></p> <p><strong>2、在装饰者对象中持有被装饰者的对象实例；</strong></p> <p><strong>3、在装饰者行为中，主动调用被装饰者行为；</strong></p> <p><strong>装饰器模式很好的体现了继承（实现）和组合的设计原则。</strong></p> <p><strong><img decoding="async" src="http://img.555519.xyz/uploads3/20220507/833c7ca1d6425db073292435ded0218c.jpg" alt="源码中的设计模式--装饰器模式_在线工具"></strong></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-64360.htm">PHP别名/导入名称空间方法详解</a></p>
                                        <p>下一个：<a href="/news/article-64988.htm">深圳宠物领养机构电话（深圳宠物领养中心）</a></p>
                                    </div>
                
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-2-1-clash-v2ray-ss-ssr.htm" title="「2月1日」2025年最新高速SSR/V2ray/Clash/Shadowrocket免费节点链接订阅，推荐便宜订阅源">「2月1日」2025年最新高速SSR/V2ray/Clash/Shadowrocket免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-26004.htm" title="北京免费领养幼犬（北京领养狗的有哪些地方）">北京免费领养幼犬（北京领养狗的有哪些地方）</a></li>
                        <li class="py-2"><a href="/news/article-22299.htm" title="猫咪疫苗三针多少钱一针啊（猫咪疫苗三针是什么）">猫咪疫苗三针多少钱一针啊（猫咪疫苗三针是什么）</a></li>
                        <li class="py-2"><a href="/news/article-62546.htm" title="C ++中的虚拟基类">C ++中的虚拟基类</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-6-clash-v2ray-ss-ssr.htm" title="「2月6日」2025年最新高速V2ray/Clash/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅源">「2月6日」2025年最新高速V2ray/Clash/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-26466.htm" title="python之pandas库的DataFrame — 数据对齐与缺失数据处理">python之pandas库的DataFrame — 数据对齐与缺失数据处理</a></li>
                        <li class="py-2"><a href="/news/article-28327.htm" title="Vant组件样式没有生效">Vant组件样式没有生效</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-5-free-node-subscribe-links.htm" title="「2月5日」2025年最新高速Clash/V2ray/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅源">「2月5日」2025年最新高速Clash/V2ray/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-53983.htm" title="厦门动物领养中心地址 厦门动物领养中心地址在哪里">厦门动物领养中心地址 厦门动物领养中心地址在哪里</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-19-free-clash-subscribe.htm" title="「12月19日」2025年最新高速SSR/Shadowrocket/Clash/V2ray免费节点链接订阅，推荐便宜订阅源">「12月19日」2025年最新高速SSR/Shadowrocket/Clash/V2ray免费节点链接订阅，推荐便宜订阅源</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        ClashNode2025订阅分享站 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/clashnode2025/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/navbar.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/counter.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>