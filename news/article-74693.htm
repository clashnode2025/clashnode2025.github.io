<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://clashnode2025.github.io/news/article-74693.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashnode2025/favicon.ico" type="image/x-icon"/>
    <title>Java设计模式——单例设计模式(八种实例)</title>
        <meta name="description" content="1、基本介绍  采取一定的方法保证在整个的软件系统中，对某个类智能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。 比如Hibernate的SessionFactor，他充当数据" />
    
    <meta name="author" content="ClashNode2025订阅分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnode2025.github.io/news/article-74693.htm" />
    <meta property="og:site_name" content="ClashNode2025订阅分享站" />
    <meta property="og:title" content="Java设计模式——单例设计模式(八种实例)" />
    <meta property="og:image" content="https://clashnode2025.github.io/uploads/20240303/48d36459087cf0b12251867f380f20ca.webp" />
        <meta property="og:release_date" content="2025-03-16T10:26:44" />
    <meta property="og:updated_time" content="2025-03-16T10:26:44" />
        <meta property="og:description" content="1、基本介绍  采取一定的方法保证在整个的软件系统中，对某个类智能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。 比如Hibernate的SessionFactor，他充当数据" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Java设计模式——单例设计模式(八种实例)">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/aos.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-J2T7JR2LXH"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-J2T7JR2LXH');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Clash Node 2025</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">新闻资讯</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/website/img/clashnode2025/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">Java设计模式——单例设计模式(八种实例)</h1>
                    </div>

                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <a id="1_1" rel="nofollow"></a>1、基本介绍</h2> <ul> <li>采取一定的方法保证在整个的软件系统中，对某个类智能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。</li> <li>比如Hibernate的SessionFactor，他充当数据存储源的代理，并负责创建Session对象。SessionFactor并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactor就够，这时就会使用到单例模式。</li> </ul> <h2> <a id="2_6" rel="nofollow"></a>2、单例模式的八种方式</h2> <ol> <li>饿汉式(静态常量)</li> <li>饿汉式(静态代码块)</li> <li>懒汉式(线程不安全)</li> <li>懒汉式(线程安全，同步方法)</li> <li>懒汉式(线程安全，同步代码块)</li> <li>双重检查</li> <li>静态内部类</li> <li>枚举</li> </ol> <h3> <a id="21_17" rel="nofollow"></a>2.1饿汉式(静态常量)</h3> <blockquote> <p>优点：写法简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</p> <p>缺点：在类装载的时候就完成实例化，没有达到懒加载的效果。如果从始至终都没使用过这个实例，则会造成内存的浪费。</p> <p>这种基于ClassLoader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式(或其它的静态方法)导致类装载，这时候初始化instance就没有达到懒加载的效果</p> <p>结论：这种单例模式可用，<strong>可能造成内存浪费</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type1<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest01</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//测试</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//饿汉式(静态变量)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	 	<span class="token comment">//1.构造器私有化，外部能new</span> 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		 	<span class="token punctuation">}</span> 	 	<span class="token comment">//2.本类内部创建对象实例</span> 	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	 	<span class="token comment">//3.提供一个公有的静态方法，返回实例对象</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	 <span class="token punctuation">}</span> </code></pre> <h3> <a id="22_62" rel="nofollow"></a>2.2饿汉式(静态代码块)</h3> <blockquote> <p>这种方式和2.1的方式类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候就执行静态代码块中的代码，初始化类的实例。优缺点和2.1是一样的。</p> <p>结论：这种单例模式可用，<strong>但是可能造成内存浪费</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type2<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest02</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">//饿汉式(静态变量)</span>  <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token comment">//1.构造器私有化，外部能new</span> 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		 	<span class="token punctuation">}</span> 	 	<span class="token comment">//2.本类内部创建对象实例</span> 	<span class="token keyword">private</span>  <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">static</span> <span class="token punctuation">{<!-- --></span> <span class="token comment">// 在静态代码块中，创建单例对象</span> 		instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	 	<span class="token comment">//3. 提供一个公有的静态方法，返回实例对象</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> 	 <span class="token punctuation">}</span> </code></pre> <h3> <a id="23_106" rel="nofollow"></a>2.3懒汉式(线程不安全)</h3> <blockquote> <p>起到了懒加载的效果，但是只能在单线程下使用。</p> <p>如果在多线程下，一个线程进入了if(singleton==null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用使用这种方式。</p> <p>结论：在实际开发中，<strong>不要使用</strong>这种方式</p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type3<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest03</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式1=============&gt;线程不安全"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，当使用到该方法时，才去创建instance</span> 	<span class="token comment">//即懒汉式</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="24_146" rel="nofollow"></a>2.4懒汉式(线程安全，同步方法)</h3> <blockquote> <p>解决了线程安全问题，但是效率太低。每个线程在想获得类的实例的时候，执行getInstance方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类的实例，直接return就行了。方法进行同步效率太低。</p> <p>结论：在实际开发中，<strong>不推荐</strong>使用这种方式</p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type4<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest04</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式2=============&gt;线程安全"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 懒汉式(线程安全，同步方法)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，加入同步处理的代码synchronized，解决线程安全问题</span> 	<span class="token comment">//即懒汉式</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="25_185" rel="nofollow"></a>2.5懒汉式(线程安全，同步代码块)</h3> <blockquote> <p>跟2.4类似，不推荐使用</p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type4<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest05</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式2=============&gt;线程安全,同步代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 懒汉式(线程安全，同步方法)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，解决线程安全问题</span> 	<span class="token comment">//即懒汉式</span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token comment">//同步代码块</span> 			<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span> 				instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="26_225" rel="nofollow"></a>2.6双重检查</h3> <blockquote> <p>Double-Check概念是多线程开发中常使用到的，进行了两次if(singleton==null)，这样就可以保证线程安全了。</p> <p>实例化代码只用执行一次，后面再次访问时，判断if(singleton==null)，直接return实例化对象，也避免了反复进行方法同步。</p> <p>线程安全、延迟加载、效率高。</p> <p>结论：在实际开发中，<strong>推荐使用这种单例设计模式</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type6<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest06</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双重检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment">// 懒汉式(线程安全，同步方法)</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，加入双重检查代码，解决线程安全问题，同事解决懒加载问题</span> 	<span class="token comment">//同时保证了效率，推荐使用</span> 	 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> instance<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="27_273" rel="nofollow"></a>2.7静态内部类</h3> <blockquote> <p>这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</p> <p>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才回装载SingletonInstance类，从而完成Singleton的实例化。</p> <p>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p> <p>避免了线程不安全，利用静态内部类特点实现延迟加载，效率高。</p> <p>结论：<strong>推荐使用</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type7<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest07</span> <span class="token punctuation">{<!-- --></span>  	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用静态内部类完成单例模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance.hashCode="</span> <span class="token operator">+</span> instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"instance2.hashCode="</span> <span class="token operator">+</span> instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		 	<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment">// 静态内部类完成，推荐使用</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton instance<span class="token punctuation">;</span> 	 	<span class="token comment">//构造器私有化</span> 	<span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span> 	 	<span class="token comment">//写一个静态内部类，该类中有个静态数据 Singleton</span> 	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span> <span class="token punctuation">{<!-- --></span> 		<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  	<span class="token punctuation">}</span> 	 	<span class="token comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span> 	 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		 		<span class="token keyword">return</span> SingletonInstance<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h3> <a id="28_323" rel="nofollow"></a>2.8枚举</h3> <blockquote> <p>借助了JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</p> <p>结论：<strong>推荐使用</strong></p> </blockquote> <pre><code class="prism language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>weirdo<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>type8<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest08</span> <span class="token punctuation">{<!-- --></span> 	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		Singleton instance <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span> 		Singleton instance2 <span class="token operator">=</span> Singleton<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> instance2<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		instance<span class="token punctuation">.</span><span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token comment">//使用枚举实现单例</span> <span class="token keyword">enum</span> Singleton <span class="token punctuation">{<!-- --></span> 	INSTANCE<span class="token punctuation">;</span> <span class="token comment">//属性</span> 	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 	<span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <h2> <a id="3JDK_354" rel="nofollow"></a>3、单例模式在JDK应用的源码分析</h2> <blockquote> <p>java.lang.Runtime就是经典的单例模式(饿汉式)</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230112/13847df97f33e7c70a05feb51f8d3ef6.jpg" alt="Java设计模式——单例设计模式(八种实例)"></p> <h2> <a id="4_361" rel="nofollow"></a>4、单例模式注意事项和细节说明</h2> <ul> <li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li> <li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是new</li> <li>单例模式使用的场景：需要频繁的进行创建和销毁对象、创建对象时耗过多或耗费资源过多(即：重量级对象)，但有经常用到的对象、工具类对象、频繁访问数据库或文件的对象(比如数据源、session工厂等)</li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-74021.htm">怀孕被猫抓破了（怀孕被猫抓破了有影响吗）</a></p>
                                        <p>下一个：<a href="/news/article-74694.htm">RPC及Dubbo和ZooKeeper的安装</a></p>
                                    </div>
                
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-72028.htm" title="宠物粮批发进货渠道有哪些呢知乎（宠物粮从哪里进货便宜）">宠物粮批发进货渠道有哪些呢知乎（宠物粮从哪里进货便宜）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-23-free-subscribe-node.htm" title="「1月23日」2025年最新高速Clash/SSR/V2ray/Shadowrocket免费节点链接订阅，推荐便宜订阅源">「1月23日」2025年最新高速Clash/SSR/V2ray/Shadowrocket免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-1-free-subscribe-node.htm" title="「3月1日」2025年最新高速Shadowrocket/Clash/V2ray/SSR免费节点链接订阅，推荐便宜订阅源">「3月1日」2025年最新高速Shadowrocket/Clash/V2ray/SSR免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-43802.htm" title="500公斤饲料粉碎搅拌一体机（2吨饲料粉碎搅拌一体机）">500公斤饲料粉碎搅拌一体机（2吨饲料粉碎搅拌一体机）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-19-free-node-subscribe.htm" title="「1月19日」2025年最新高速Shadowrocket/SSR/Clash/V2ray免费节点链接订阅，推荐便宜订阅源">「1月19日」2025年最新高速Shadowrocket/SSR/Clash/V2ray免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-35386.htm" title="整理了25个Pandas实用技巧（上）">整理了25个Pandas实用技巧（上）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-8-clash-windows.htm" title="「2月8日」2025年最新高速Clash/SSR/Shadowrocket/V2ray免费节点链接订阅，推荐便宜订阅源">「2月8日」2025年最新高速Clash/SSR/Shadowrocket/V2ray免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-14-free-high-speed-nodes.htm" title="「3月14日」2025年最新高速Clash/V2ray/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅源">「3月14日」2025年最新高速Clash/V2ray/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-11-clash-node-daily-updates.htm" title="「2月11日」2025年最新高速Shadowrocket/V2ray/SSR/Clash免费节点链接订阅，推荐便宜订阅源">「2月11日」2025年最新高速Shadowrocket/V2ray/SSR/Clash免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-72686.htm" title="上海宠物领养中心地址电话（上海2020年宠物领养活动）">上海宠物领养中心地址电话（上海2020年宠物领养活动）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">51</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">83</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        ClashNode2025订阅分享站 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/clashnode2025/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/navbar.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/counter.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>