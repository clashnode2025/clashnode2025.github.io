<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://clashnode2025.github.io/news/article-51319.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashnode2025/favicon.ico" type="image/x-icon"/>
    <title>自定义注解详细介绍</title>
        <meta name="description" content="1 注解的概念 1.1 注解的官方定义 首先看看官方对注解的描述：  An annotation is a form of metadata, that can be added to Java so" />
    
    <meta name="author" content="ClashNode2025订阅分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnode2025.github.io/news/article-51319.htm" />
    <meta property="og:site_name" content="ClashNode2025订阅分享站" />
    <meta property="og:title" content="自定义注解详细介绍" />
    <meta property="og:image" content="https://clashnode2025.github.io/uploads/20240303/c0ed41dad363898b3bc564a242037c9e.webp" />
        <meta property="og:release_date" content="2025-02-05T08:18:21" />
    <meta property="og:updated_time" content="2025-02-05T08:18:21" />
        <meta property="og:description" content="1 注解的概念 1.1 注解的官方定义 首先看看官方对注解的描述：  An annotation is a form of metadata, that can be added to Java so" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="自定义注解详细介绍">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/aos.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-J2T7JR2LXH"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-J2T7JR2LXH');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Clash Node 2025</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">新闻资讯</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img src="/assets/website/img/clashnode2025/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">自定义注解详细介绍</h1>
                    </div>

                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2><a id="1__0" rel="nofollow"></a>1 注解的概念</h2> <h3><a id="11__1" rel="nofollow"></a>1.1 注解的官方定义</h3> <p>首先看看官方对注解的描述：</p> <blockquote> <p>An annotation is a form of metadata, that can be added to Java source code. Classes, methods, variables, parameters and packages may be annotated. Annotations have no direct effect on the operation of the code they annotate.</p> </blockquote> <p>翻译：</p> <blockquote> <p>注解是一种能被添加到java代码中的元数据，类、方法、变量、参数和包都可以用注解来修饰。注解对于它所修饰的代码并没有直接的影响。</p> </blockquote> <p>通过官方描述得出以下结论：</p> <ol> <li>注解是一种元数据形式。即注解是属于java的一种数据类型，和类、接口、数组、枚举类似。</li> <li>注解用来修饰，类、方法、变量、参数、包。</li> <li>注解不会对所修饰的代码产生直接的影响。</li> </ol> <h3><a id="12__15" rel="nofollow"></a>1.2 注解的使用范围</h3> <p>继续看看官方对它的使用范围的描述：</p> <blockquote> <p>Annotations have a number of uses, among them:<strong>Information for the complier</strong> - Annotations can be used by the compiler to detect errors or suppress warnings.<strong>Compiler-time and deployment-time processing</strong> - Software tools can process annotation information to generate code, XML files, and so forth.<strong>Runtime processing</strong> - Some annotations are available to be examined at runtime.</p> </blockquote> <p>翻译：</p> <blockquote> <p>注解又许多用法，其中有：<strong>为编译器提供信息</strong> - 注解能被编译器检测到错误或抑制警告。<strong>编译时和部署时的处理</strong> - 软件工具能处理注解信息从而生成代码，XML文件等等。<strong>运行时的处理</strong> - 有些注解在运行时能被检测到。</p> </blockquote> <h2><a id="2__22" rel="nofollow"></a>2 如何自定义注解</h2> <p>基于上一节，已对注解有了一个基本的认识：<strong>注解其实就是一种标记，可以在程序代码中的关键节点（类、方法、变量、参数、包）上打上这些标记，然后程序在编译时或运行时可以检测到这些标记从而执行一些特殊操作</strong>。因此可以得出自定义注解使用的基本流程：</p> <ul> <li><strong>第一步，定义注解——相当于定义标记；</strong></li> <li><strong>第二步，配置注解——把标记打在需要用到的程序代码中；</strong></li> <li><strong>第三步，解析注解——在编译期或运行时检测到标记，并进行特殊操作。</strong></li> </ul> <p><center><img fetchpriority="high" decoding="async" src="http://img.555519.xyz/uploads3/20220905/0a37827bfead1882ee158f4f312d4735.jpg" alt="自定义注解详细介绍" width="480" height="420"/></center></p> <h3><a id="21__30" rel="nofollow"></a>2.1 基本语法</h3> <p>注解类型的声明部分：</p> <p>注解在Java中，与类、接口、枚举类似，因此其声明语法基本一致，只是所使用的关键字有所不同<code>@interface</code>。<strong>在底层实现上，所有定义的注解都会自动继承java.lang.annotation.Annotation接口</strong>。</p> <pre><code class="prism language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">CherryAnnotation</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <p>注解类型的实现部分：</p> <p>根据我们在自定义类的经验，在类的实现部分无非就是书写构造、属性或方法。但是，在自定义注解中，其实现部分<strong>只能定义</strong>一个东西：<strong>注解类型元素（annotation type element）</strong>。咱们来看看其语法：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">CherryAnnotation</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span> String<span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>也许你会认为这不就是接口中定义抽象方法的语法嘛？别着急，咱们看看下面这个：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">CherryAnnotation</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span> String<span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>看到关键字<code>default</code>了吗？还觉得是抽象方法吗？</p> <p>注解里面定义的是：<strong>注解类型元素！</strong></p> <p>定义注解类型元素时需要注意如下几点：</p> <ol> <li>访问修饰符必须为public，不写默认为public；</li> <li>该元素的类型只能是基本数据类型、String、Class、枚举类型、注解类型（体现了注解的嵌套效果）以及上述类型的一位数组；</li> <li>该元素的名称一般定义为名词，如果注解中只有一个元素，请把名字起为value（后面使用会带来便利操作）；</li> <li>()不是定义方法参数的地方，也不能在括号中定义任何参数，仅仅只是一个特殊的语法；</li> <li><code>default</code>代表默认值，值必须和第2点定义的类型一致；</li> <li>如果没有默认值，代表后续使用注解时必须给该类型元素赋值。</li> </ol> <p>可以看出，注解类型元素的语法非常奇怪，即又有属性的特征（可以赋值）,又有方法的特征（打上了一对括号）。但是这么设计是有道理的，我们在后面的章节中可以看到：注解在定义好了以后，<strong>使用的时候操作元素类型像在操作属性，解析的时候操作元素类型像在操作方法</strong>。</p> <h3><a id="22__73" rel="nofollow"></a>2.2 常用的元注解</h3> <p>一个最最基本的注解定义就只包括了上面的两部分内容：1、注解的名字；2、注解包含的类型元素。但是，我们在使用JDK自带注解的时候发现，有些注解只能写在方法上面（比如@Override）；有些却可以写在类的上面（比如@Deprecated）。当然除此以外还有很多细节性的定义，那么这些定义该如何做呢？接下来就该元注解出场了！<br /><strong>元注解：专门修饰注解的注解</strong>。它们都是为了更好的设计自定义注解的细节而专门设计的。我们为大家一个个来做介绍。</p> <h4><a id="221_Target_76" rel="nofollow"></a>2.2.1 @Target</h4> <p>@Target注解，是专门用来限定某个自定义注解能够被应用在哪些Java元素上面的。它使用一个枚举类型定义如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">enum</span> ElementType<span class="token punctuation">{<!-- --></span><span class="token comment">/** 类，接口（包括注解类型）或枚举的声明 */</span>     TYPE<span class="token punctuation">,</span><span class="token comment">/** 属性的声明 */</span>     FIELD<span class="token punctuation">,</span><span class="token comment">/** 方法的声明 */</span>     METHOD<span class="token punctuation">,</span><span class="token comment">/** 方法形式参数声明 */</span>     PARAMETER<span class="token punctuation">,</span><span class="token comment">/** 构造方法的声明 */</span>     CONSTRUCTOR<span class="token punctuation">,</span><span class="token comment">/** 局部变量声明 */</span>     LOCAL_VARIABLE<span class="token punctuation">,</span><span class="token comment">/** 注解类型声明 */</span>     ANNOTATION_TYPE<span class="token punctuation">,</span><span class="token comment">/** 包的声明 */</span>     PACKAGE<span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token comment">//@CherryAnnotation被限定只能使用在类、接口或方法上面</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">CherryAnnotation</span><span class="token punctuation">{<!-- --></span>     String<span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <h4><a id="222_Retention_116" rel="nofollow"></a>2.2.2 @Retention</h4> <p>@Retention注解，翻译为持久力、保持力。即用来修饰自定义注解的生命力。<br /> 注解的生命周期有三个阶段：1、Java源文件阶段；2、编译到class文件阶段；3、运行期阶段。同样使用了RetentionPolicy枚举类型定义了三个阶段：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">enum</span> RetentionPolicy<span class="token punctuation">{<!-- --></span><span class="token comment">/**      * Annotations are to be discarded by the compiler.      * （注解将被编译器忽略掉）      */</span>     SOURCE<span class="token punctuation">,</span><span class="token comment">/**      * Annotations are to be recorded in the class file by the compiler      * but need not be retained by the VM at run time.  This is the default      * behavior.      * （注解将被编译器记录在class文件中，但在运行时不会被虚拟机保留，这是一个默认的行为）      */</span>     CLASS<span class="token punctuation">,</span><span class="token comment">/**      * Annotations are to be recorded in the class file by the compiler and      * retained by the VM at run time, so they may be read reflectively.      * （注解将被编译器记录在class文件中，而且在运行时会被虚拟机保留，因此它们能通过反射被读取到）      * @see java.lang.reflect.AnnotatedElement      */</span>     RUNTIME<span class="token punctuation">}</span></code></pre> <p>我们再详解一下：</p> <ol> <li>如果一个注解被定义为RetentionPolicy.SOURCE，则它将被限定在Java源文件中，那么这个注解即不会参与编译也不会在运行期起任何作用，这个注解就和一个注释是一样的效果，只能被阅读Java文件的人看到；</li> <li>如果一个注解被定义为RetentionPolicy.CLASS，则它将被编译到Class文件中，那么编译器可以在编译时根据注解做一些处理动作，但是运行时JVM（Java虚拟机）会忽略它，我们在运行期也不能读取到；</li> <li>如果一个注解被定义为RetentionPolicy.RUNTIME，那么这个注解可以在运行期的加载阶段被加载到Class对象中。那么在程序运行阶段，我们可以通过反射得到这个注解，并通过判断是否有这个注解或这个注解中属性的值，从而执行不同的程序代码段。<strong>我们实际开发中的自定义注解几乎都是使用的RetentionPolicy.RUNTIME</strong>；</li> <li>在默认的情况下，自定义注解是使用的RetentionPolicy.CLASS。</li> </ol> <h4><a id="223_Documented_153" rel="nofollow"></a>2.2.3 @Documented</h4> <p>@Documented注解，是被用来指定自定义注解是否能随着被定义的java文件生成到JavaDoc文档当中。</p> <h4><a id="224_Inherited_155" rel="nofollow"></a>2.2.4 @Inherited</h4> <p>@Inherited注解，是指定某个自定义注解如果写在了父类的声明部分，那么子类的声明部分也能自动拥有该注解。@Inherited注解只对那些@Target被定义为ElementType.TYPE的自定义注解起作用。</p> <h2><a id="3__158" rel="nofollow"></a>3 自定义注解的配置使用</h2> <p>回顾一下注解的使用流程：</p> <ul> <li><strong>第一步，定义注解——相当于定义标记；</strong></li> <li><strong>第二步，配置注解——把标记打在需要用到的程序代码中；</strong></li> <li><strong>第三步，解析注解——在编译期或运行时检测到标记，并进行特殊操作。</strong></li> </ul> <p>到目前为止我们只是完成了第一步，接下来我们就来学习第二步，配置注解，如何在另一个类当中配置它。</p> <h3><a id="31_Java_166" rel="nofollow"></a>3.1 在具体的Java类上使用注解</h3> <p>首先，定义一个注解、和一个供注解修饰的简单Java类</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">CherryAnnotation</span><span class="token punctuation">{<!-- --></span>     String<span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Student</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good Good Study, Day Day Up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>简单分析下：</p> <ol> <li>CherryAnnotation的@Target定义为ElementType.METHOD，那么它书写的位置应该在方法定义的上方，即：public void study(int times)之上；</li> <li>由于我们在CherryAnnotation中定义的有注解类型元素，而且有些元素是没有默认值的，这要求我们在使用的时候必须在标记名后面打上()，并且在()内以“元素名=元素值“的形式挨个填上所有没有默认值的注解类型元素（有默认值的也可以填上重新赋值），中间用“,”号分割；</li> </ol> <p>所以最终书写形式如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Student</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@CherryAnnotation</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"cherry-peng"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span>score<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good Good Study, Day Day Up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3><a id="32__207" rel="nofollow"></a>3.2 特殊语法</h3> <p>特殊语法一：</p> <p><strong>如果注解本身没有注解类型元素，那么在使用注解的时候可以省略()，直接写为：@注解名，它和标准语法@注解名()等效！</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">FirstAnnotation</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token comment">//等效于@FirstAnnotation()</span><span class="token annotation punctuation">@FirstAnnotation</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">JavaBean</span><span class="token punctuation">{<!-- --></span><span class="token comment">//省略实现部分</span><span class="token punctuation">}</span></code></pre> <p>特殊语法二：</p> <p><strong>如果注解本本身只有一个注解类型元素，而且命名为value，那么在使用注解的时候可以直接使用：@注解名(注解值)，其等效于：@注解名(value = 注解值)</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">SecondAnnotation</span><span class="token punctuation">{<!-- --></span> 	String<span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token comment">//等效于@ SecondAnnotation(value = "this is second annotation")</span><span class="token annotation punctuation">@SecondAnnotation</span><span class="token punctuation">(</span><span class="token string">"this is annotation"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">JavaBean</span><span class="token punctuation">{<!-- --></span><span class="token comment">//省略实现部分</span><span class="token punctuation">}</span></code></pre> <p>特殊用法三：</p> <p><strong>如果注解中的某个注解类型元素是一个数组类型，在使用时又出现只需要填入一个值的情况，那么在使用注解时可以直接写为：@注解名(类型名 = 类型值)，它和标准写法：@注解名(类型名 = {类型值})等效！</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">ThirdAnnotation</span><span class="token punctuation">{<!-- --></span> 	String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token comment">//等效于@ ThirdAnnotation(name = {"this is third annotation"})</span> @<span class="token function">ThirdAnnotation</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"this is third annotation"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">JavaBean</span><span class="token punctuation">{<!-- --></span><span class="token comment">//省略实现部分</span><span class="token punctuation">}</span></code></pre> <p>特殊用法四：</p> <p><strong>如果一个注解的@Target是定义为Element.PACKAGE，那么这个注解是配置在package-info.java中的，而不能直接在某个类的package代码上面配置。</strong></p> <h2><a id="4__269" rel="nofollow"></a>4 自定义注解的运行时解析</h2> <p>这一章是使用注解的核心，读完此章即可明白，如何<strong>在程序运行时检测到注解，并进行一系列特殊操作</strong>！</p> <h3><a id="41__271" rel="nofollow"></a>4.1 回顾注解的保持力</h3> <p>首先回顾一下，之前自定义的注解@CherryAnnotation，并把它配置在了类Student上，代码如下：</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span><span class="token class-name">CherryAnnotation</span><span class="token punctuation">{<!-- --></span>     String<span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <pre><code class="prism language-java"><span class="token keyword">package</span> pojos<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Student</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@CherryAnnotation</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"cherry-peng"</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">,</span>score<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Good Good Study, Day Day Up!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>注解保持力的三个阶段：</p> <ol> <li>Java源文件阶段；</li> <li>编译到class文件阶段；</li> <li>运行期阶段。</li> </ol> <p>只有当注解的保持力处于运行阶段，即使用<code>@Retention(RetentionPolicy.RUNTIME)</code>修饰注解时，才能在JVM运行时，检测到注解，并进行一系列特殊操作。</p> <h3><a id="42__303" rel="nofollow"></a>4.2 反射操作获取注解</h3> <p>因此，明确我们的目标：<strong>在运行期探究和使用编译期的内容（编译期配置的注解），要用到Java中的灵魂技术——反射！</strong></p> <p><center><br /></center></p> <pre><code class="prism language-java"><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">TestAnnotation</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span><span class="token comment">//获取Student的Class对象</span>             Class<span class="token class-name">stuClass</span><span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"pojos.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//说明一下，这里形参不能写成Integer.class，应写为int.class</span>             Method stuMethod<span class="token operator">=</span> stuClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"study"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>stuMethod<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>CherryAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student类上配置了CherryAnnotation注解！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取该元素上指定类型的注解</span>                 CherryAnnotation cherryAnnotation<span class="token operator">=</span> stuMethod<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>CherryAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span><span class="token operator">+</span> cherryAnnotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", age: "</span><span class="token operator">+</span> cherryAnnotation<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", score: "</span><span class="token operator">+</span> cherryAnnotation<span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>                 System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student类上没有配置CherryAnnotation注解！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>解释一下：</p> <ol> <li>如果我们要获得的注解是配置在方法上的，那么我们要从Method对象上获取；如果是配置在属性上，就需要从该属性对应的Field对象上去获取，如果是配置在类型上，需要从Class对象上去获取。总之在谁身上，就从谁身上去获取！</li> <li><code>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</code>方法是专门判断该元素上是否配置有某个指定的注解；</li> <li><code>getAnnotation(Class&lt;A&gt; annotationClass)</code>方法是获取该元素上指定的注解。之后再调用该注解的注解类型元素方法就可以获得配置时的值数据；</li> <li>反射对象上还有一个方法<code>getAnnotations()</code>，该方法可以获得该对象身上配置的所有的注解。它会返回给我们一个注解数组，需要注意的是该数组的类型是Annotation类型，这个Annotation是一个来自于java.lang.annotation包的接口。</li> </ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-51318.htm">高薪程序员&amp;面试题精讲系列17之Java代码中如果有太多if语句该如何优化？</a></p>
                                        <p>下一个：<a href="/news/article-51839.htm">动物打针去哪里打（动物 打针）</a></p>
                                    </div>
                
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-5-shadowrocket-node.htm" title="「12月5日」2025年最新高速SSR/Shadowrocket/V2ray/Clash免费节点链接订阅，推荐便宜订阅机场">「12月5日」2025年最新高速SSR/Shadowrocket/V2ray/Clash免费节点链接订阅，推荐便宜订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-33076.htm" title="动物疫苗使用时的注意事项有哪些内容和要求（动物接种疫苗的注意事项）">动物疫苗使用时的注意事项有哪些内容和要求（动物接种疫苗的注意事项）</a></li>
                        <li class="py-2"><a href="/news/article-48217.htm" title="佳雯宠物医院客服电话是多少号（佳雯宠物医院客服电话是多少号码）">佳雯宠物医院客服电话是多少号（佳雯宠物医院客服电话是多少号码）</a></li>
                        <li class="py-2"><a href="/news/article-29250.htm" title="Spring Security教程（13）&#8212;- 验证码功能的实现">Spring Security教程（13）&#8212;- 验证码功能的实现</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-26-free-ssr-subscribe.htm" title="「11月26日」2025年最新高速SSR/V2ray/Clash/Shadowrocket免费节点链接订阅，推荐便宜订阅机场">「11月26日」2025年最新高速SSR/V2ray/Clash/Shadowrocket免费节点链接订阅，推荐便宜订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-41816.htm" title="义乌福利院领养孩子条件（义乌福利院领养孩子条件要求）">义乌福利院领养孩子条件（义乌福利院领养孩子条件要求）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-7-free-ssr-node.htm" title="「1月7日」2025年最新高速Shadowrocket/V2ray/Clash/SSR免费节点链接订阅，推荐便宜订阅源">「1月7日」2025年最新高速Shadowrocket/V2ray/Clash/SSR免费节点链接订阅，推荐便宜订阅源</a></li>
                        <li class="py-2"><a href="/news/article-30086.htm" title="芭比堂宠物医院价格多少（芭比堂宠物医院玉泉路总店）">芭比堂宠物医院价格多少（芭比堂宠物医院玉泉路总店）</a></li>
                        <li class="py-2"><a href="/news/article-28787.htm" title="maven打war包">maven打war包</a></li>
                        <li class="py-2"><a href="/news/article-42315.htm" title="南京宠物领养中心在哪个位置呀（南京宠物领养中心在哪个位置呀最近）">南京宠物领养中心在哪个位置呀（南京宠物领养中心在哪个位置呀最近）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">21</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        ClashNode2025订阅分享站 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/clashnode2025/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/navbar.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/counter.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>