<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <!-- Required meta tags -->
    <link rel="canonical" href="https://clashnode2025.github.io/news/article-42802.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="icon" href="/assets/website/img/clashnode2025/favicon.ico" type="image/x-icon"/>
    <title>func-spring-boot-starter 匿名函数托管</title>
        <meta name="description" content="GitHub项目路径:  https://github.com/yiurhub/func-spring-boot-starter  Gitee项目路径:  https://gitee.com/yiur" />
    
    <meta name="author" content="ClashNode2025订阅分享站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnode2025.github.io/news/article-42802.htm" />
    <meta property="og:site_name" content="ClashNode2025订阅分享站" />
    <meta property="og:title" content="func-spring-boot-starter 匿名函数托管" />
    <meta property="og:image" content="https://clashnode2025.github.io/uploads/20240303/136bc0272fb80d68b3f9b909dd50fe09.webp" />
        <meta property="og:release_date" content="2025-01-19T07:09:12" />
    <meta property="og:updated_time" content="2025-01-19T07:09:12" />
        <meta property="og:description" content="GitHub项目路径:  https://github.com/yiurhub/func-spring-boot-starter  Gitee项目路径:  https://gitee.com/yiur" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="func-spring-boot-starter 匿名函数托管">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;700&family=Open+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/icomoon/style.css">
    <link rel="stylesheet" href="/assets/website/fonts/clashnode2025/flaticon/font/flaticon.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/bootstrap.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/tiny-slider.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/aos.css">
    <link rel="stylesheet" href="/assets/website/css/clashnode2025/style.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-J2T7JR2LXH"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-J2T7JR2LXH');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <div class="site-mobile-menu site-navbar-target">
        <div class="site-mobile-menu-header">
            <div class="site-mobile-menu-close">
                <span class="icofont-close js-menu-toggle"></span>
            </div>
        </div>
        <div class="site-mobile-menu-body"></div>
    </div>
    <nav class="site-nav mt-3">
        <div class="container">
            <div class="site-navigation">
                                <a href="/" class="logo m-0 mt-2 float-start">Clash Node 2025</a>
                                <ul class="js-clone-nav d-none d-lg-inline-block text-start site-menu float-end">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
                <a href="#" class="burger ml-auto float-right site-menu-toggle js-menu-toggle d-inline-block d-lg-none" data-toggle="collapse" data-target="#main-navbar">
                    <span></span>
                </a>
            </div>
        </div>
    </nav>
    <div class="hero-section body-page">
        <div class="container">
            <div class="row justify-content-between">
                <div class="col-lg-5">
                    <h2 class="heading mb-3" data-aos="fade-up" data-aos-delay="100">新闻资讯</h2>
                    <p class="mb-5" data-aos="fade-up" data-aos-delay="200">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                    </p>
                </div>
                <div class="col-lg-6">
                    <div class="img-wrap" data-aos="fade-left">
                        <img href="/assets/website/img/clashnode2025/hero_1.png" alt="Image" class="img-fluid">
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="section section-3">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                    <div data-aos="fade-up">
                        <h1 class="mb-5 text-center">func-spring-boot-starter 匿名函数托管</h1>
                    </div>

                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <blockquote> <p>GitHub项目路径:</p> </blockquote> <pre><code class="language-http">https://github.com/yiurhub/func-spring-boot-starter</code></pre> <blockquote> <p>Gitee项目路径:</p> </blockquote> <pre><code class="language-http">https://gitee.com/yiur/func-spring-boot-starter</code></pre> <h2 id="使用注意事项">使用注意事项</h2> <blockquote> <p>推荐版本:</p> </blockquote> <ol> <li><strong>spring-boot-starter<code>2.6.x</code></strong></li> </ol> <h2 id="设计原理">设计原理</h2> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b0158f5010989af0dc22443d5d40d925.jpg" alt="func-spring-boot-starter 匿名函数托管"></p> <h2 id="匿名函数特性">匿名函数特性</h2> <h3 id="匿名函数链接配置">匿名函数链接配置</h3> <h3 id="yaml">Yaml</h3> <pre><code class="language-yaml">func-link:     # 默认代理模式     singleton: true     # 默认开启lambda模式     lambda: true     # 默认的callback回调函数类     call-back: org.func.spring.boot.component.callback.SimpleFuncCallback     # logger 配置     logger:       # 默认false 不输出日志       enable-log: false       # 默认输出日志信息 ${取当前匿名函数的公开信息}       message: "call method --&gt; ${methodName}(${parameterSource})"       # 日志执行日志格式化       date-format: "yyyy-MM-dd HH:mm:ss"       # 输出日志的文件名       file-name: "simple"</code></pre> <h3 id="javaconfig">JavaConfig</h3> <p>添加类注解<code>@EnableFuncLambda</code></p> <p>需要注入<code>FuncLinkFactory</code>工厂类，生产默认<code>FuncLink</code>链接类</p> <p>添加链接的方法为<code>setObject(key, Object)</code><strong>链式编程</strong><strong>泛型约束</strong><strong>Lambda</strong></p> <p>	key: {Spring Bean Name}????{功能链接 | 插件}</p> <p>	object: ${功能链接类| 插件类}</p> <p>FuncLink推荐Lambda操作</p> <p>详细内容请看项目:</p> <pre><code class="language-http">https://gitee.com/yiur/func-spring-boot-starter/tree/main/func-web-simple</code></pre> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean     public FuncLink funcLink() {         return funcLinkFactory.build()                 .&lt;FuncLogger&gt;setObject("logger:log", (set, log) -&gt; "logger =&gt; ${methodName}\r\n");     }  }</code></pre> <h3 id="严格类型托管">严格类型托管</h3> <p>开发推荐<strong>严格类型托管</strong>，有代码提示，开发效率更高，在Web项目中，可以托管整个<strong>Servcie</strong>层</p> <p>配合Mybaits，Redis等框架一起使用</p> <p><strong>1、定义接口</strong></p> <p>用于SpringBoot自动注入funcLink代理的HttpLink类</p> <pre><code class="language-java">public interface HttpLink {      Object link();  }</code></pre> <p><strong>2、代理类代理接口方法</strong></p> <p><code>@FuncBean(link = "funcLink Bean Name")</code></p> <p>添加类注解<code>@FuncBean</code>声明这是一个匿名函数代理类</p> <p>添加方法注解<code>@FuncLambda</code>声明这是一个代理方法</p> <p>如果有参数请加上参数注解<code>@FuncParameter("参数名")</code></p> <pre><code class="language-java">@Component @FuncBean public class FuncLinkHosting implements HttpLink {      @Override     @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h3 id="松散类型托管">松散类型托管</h3> <p>开发使用<strong>不推荐</strong>，后续2.x估计废用，可读性不高</p> <p><strong>1、定义接口</strong></p> <p>添加类注解<code>@Component</code>，用于SpringBoot自动注入funcLink代理的HttpLink类，SpringBoot插件提升</p> <pre><code class="language-java">@Component public interface HttpLink {      Object link();  }</code></pre> <p><strong>2、代理类代理接口方法</strong></p> <p>@FuncBean(link = "funcLink Bean Name")</p> <p>松散类型托管需要注意的事项:</p> <ol> <li>代理方法返回值与接口不一样，接口返回值必须得是Object</li> </ol> <p>添加类注解<code>@FuncBean</code>声明这是一个匿名函数代理类</p> <p>添加方法注解<code>@FuncLambda</code>声明这是一个代理方法</p> <p>如果有参数请加上参数注解<code>@FuncParameter("参数名")</code></p> <pre><code class="language-java">@FuncBean public class FuncLinkHosting {      @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h3 id="funclogger">@FuncLogger</h3> <p>添加方法注解<code>@FuncLogger</code>开启方法执行完后的输出日志，<strong>优先级比配置文件高</strong></p> <p><code>@FuncLogger</code>参数<br /> name: 生成的日志文件名，默认为func-link</p> <p>	suffix: 生成的日志文件后缀名，默认为log</p> <p>	path: 生成的日志文件存放绝对路径路径，默认当前项目下的log文件夹下</p> <pre><code class="language-java">@FuncBean public class FuncLinkHosting implements HttpLink {      @Override     @FuncLogger     @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h4 id="funclink-返回message">FuncLink 返回message</h4> <h4 id="应用">应用</h4> <p>Logger 日志功能链接，根据执行方法绑定的Bean或者ref，执行此功能</p> <p>在绑定的方法中执行完后，则会输出日志，获取执行的方法信息</p> <h4 id="链接">链接</h4> <p><code>FuncLogger</code></p> <p>	功能链接为:<strong>"${Bean Name}:log"</strong></p> <h4 id="代码">代码</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean     public FuncLink funcLink() {         return funcLinkFactory.build()                 .&lt;FuncLogger&gt;setObject("httpLink:log", (set, log) -&gt; "logger =&gt; ${methodName}\r\n");     }  }</code></pre> <h3 id="funccallback-注解实现">@FuncCallback 注解实现</h3> <p>添加方法注解<code>@FuncCallback</code>绑定方法执行后的回调函数</p> <p>成功执行回调:<code>then(T result)</code></p> <p>失败执行回调:<code>error(Throwable e)</code></p> <pre><code class="language-java">public class DefaultCallback implements FuncCallback {      @Override     public Object then(Object data) { return data; }      @Override     public Object error(Throwable error) {         return error.getMessage();     }  }</code></pre> <pre><code class="language-java">@FuncBean public class FuncLinkHosting implements HttpLink {      @Override     @FuncCallback(DefaultCallback.class)     @FuncLambda(classFile = HttpLink.class)     public Map&lt;String, String&gt; link() {         Map&lt;String, String&gt; map = new HashMap&lt;&gt;(10);         map.put("GitHub", "https://github.com/yiurhub");         map.put("Gitee", "https://gitee.com/yiur");         map.put("博客", "https://www.cnblogs.com/yiur-bgy");         return map;     }  }</code></pre> <h3 id="funclink-callback-实现">FuncLink Callback 实现</h3> <h4 id="应用-1">应用</h4> <p>Callback 方法执行完回调功能链接，根据执行方法绑定的Bean或者ref，执行此功能</p> <p>在Web项目Service层中返回方法执行的结果，能做到服务熔断操作</p> <h4 id="链接-1">链接</h4> <p><code>FuncCallback&lt;T, R&gt;</code>约束参数值和返回值，<strong>执行优先级: 1</strong></p> <p>	功能链接为:<strong>"${Bean Name}:callback"</strong></p> <p><code>FuncCallbackThen&lt;T, R&gt;</code>约束参数值和返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:callback-then"</strong></p> <p><code>FuncCallbackError&lt;R&gt;</code>约束返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:callback-error"</strong></p> <h4 id="代码-1">代码</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean("simple")     public FuncLink funcLink() {         return funcLinkFactory.build()                 // httpLink                 .&lt;FuncCallback&lt;Map&lt;String, String&gt;, Object&gt;&gt;setObject("httpLink:callback", new FuncCallback&lt;Map&lt;String, String&gt;, Object&gt;() {                     @Override                     public Object then(Map&lt;String, String&gt; result) {                         return result;                     }                      @Override                     public Object error(Throwable throwable) {                         return throwable;                     }                 })                 .&lt;FuncCallbackThen&lt;Map&lt;String, String&gt;, Object&gt;&gt;setObject("httpLink:callback-then", result -&gt; result)                 .&lt;FuncCallbackError&lt;Object&gt;&gt;setObject("httpLink:callback-error", throwable -&gt; throwable);     }  }</code></pre> <h3 id="funclink-life-实现">FuncLink Life 实现</h3> <h4 id="应用-2">应用</h4> <p>Life 方法执行前后回调功能链接，根据执行方法绑定的Bean或者ref，执行此功能</p> <p>方法执行前会先执行start方法，用来检查参数</p> <p>方法执行后会执行end方法，用来检查返回值</p> <h4 id="链接-2">链接</h4> <p><code>FuncLife&lt;T, R&gt;</code>约束参数值和返回值，<strong>执行优先级: 1</strong></p> <p>	功能链接为:<strong>"${Bean Name}:life"</strong></p> <p><code>FuncLifeStart</code>约束参数值和返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:life-start"</strong></p> <p><code>FuncLifeEnd&lt;T, R&gt;</code>约束返回值，<strong>执行优先级: 2</strong></p> <p>	功能链接为:<strong>"${Bean Name}:life-end"</strong></p> <h4 id="代码-2">代码</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean("simple")     public FuncLink funcLink() {         return funcLinkFactory.build()                 // httpLink                 .&lt;FuncLife&lt;Object, Object&gt;&gt;setObject("httpLink:life", new FuncLife&lt;Object, Object&gt;() {                     @Override                     public Map&lt;String, Object&gt; start(Map&lt;String, Object&gt; args) {                         return args;                     }                      @Override                     public Object end(Object result) {                         return result;                     }                 })                 .&lt;FuncLifeStart&gt;setObject("httpLink:life-start", args -&gt; args)                 .&lt;FuncLifeEnd&lt;Object, Object&gt;&gt;setObject("httpLink:life-end", result -&gt; result);     }  }</code></pre> <h2 id="113release-更新">1.1.3.RELEASE 更新</h2> <p>func-spring-boot-starter-1.1.2.RELEASE 依赖</p> <pre><code class="language-xml">&lt;!--func--&gt; &lt;dependency&gt;     &lt;groupId&gt;io.github.yiurhub&lt;/groupId&gt;     &lt;artifactId&gt;func-spring-boot-starter&lt;/artifactId&gt;     &lt;version&gt;1.1.3.RELEASE&lt;/version&gt; &lt;/dependency&gt;</code></pre> <h3 id="添加匿名函数链接自定义实现功能">添加匿名函数链接自定义实现功能</h3> <blockquote> <p>AbstractFuncLifePlugin</p> </blockquote> <pre><code class="language-java">public class SimpleLifePlugin extends AbstractFuncLifePlugin {      public SimpleLifePlugin() {     }      public SimpleLifePlugin(String beanName, String[] refs, FuncLink funcLink, FuncCallbackPlugin funcCallbackPlugin) {         super(beanName, refs, funcLink, funcCallbackPlugin);     }      }</code></pre> <blockquote> <p>AbstractFuncCallbackPlugin</p> </blockquote> <pre><code class="language-java">public class SimpleCallbackPlugin extends AbstractFuncCallbackPlugin {      public SimpleCallbackPlugin() {     }      public SimpleCallbackPlugin(String beanName, String[] refs, FuncLink funcLink, FuncProperties funcProperties, FuncLoggerPlugin funcLoggerPlugin) {         super(beanName, refs, funcLink, funcProperties, funcLoggerPlugin);     }      }</code></pre> <blockquote> <p>AbstractFuncLoggerPlugin</p> </blockquote> <pre><code class="language-java">public class SimpleLoggerPlugin extends AbstractFuncLoggerPlugin {      public SimpleLoggerPlugin() {     }      public SimpleLoggerPlugin(String beanName, String[] refs, FuncLink funcLink, FuncProperties funcProperties) {         super(beanName, refs, funcLink, funcProperties);     }      }</code></pre> <h4 id="funclink-使用">FuncLink 使用</h4> <pre><code class="language-java">@Configuration @EnableFuncLambda("com.simple.web.lambda") public class FuncLinkConfig {      @Autowired     public FuncLinkFactory funcLinkFactory;      @Bean("simple")     public FuncLink funcLink() {         return funcLinkFactory.build()                 // httpLink                 .setObject("httpLink:FuncLifePlugin", SimpleLifePlugin.class)                 .setObject("httpLink:FuncCallbackPlugin", SimpleCallbackPlugin.class)                 .setObject("httpLink:FuncLoggerPlugin", SimpleLoggerPlugin.class)     }  }</code></pre> <h2 id="api更改">API更改</h2> <h3 id="注解更改">注解更改</h3> <p><code>@FuncConfiguration</code> 改为<code>@FuncBean</code></p> <p><code>@EnableLog</code> 改为<code>@FuncLogger</code></p> <p><code>CallbackClass</code> 改为<code>@FuncCallback</code></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-42315.htm">南京宠物领养中心在哪个位置呀（南京宠物领养中心在哪个位置呀最近）</a></p>
                                        <p>下一个：<a href="/news/article-42803.htm">动物疫苗品牌排行榜 动物疫苗品牌排行榜前十名</a></p>
                                    </div>
                
                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-16-free-clash.htm" title="「11月16日」2025年最新高速SSR/Shadowrocket/V2ray/Clash免费节点链接订阅，推荐便宜订阅机场">「11月16日」2025年最新高速SSR/Shadowrocket/V2ray/Clash免费节点链接订阅，推荐便宜订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-19553.htm" title="找人领养小狗的广告（找人领养狗狗怎么发朋友圈说说）">找人领养小狗的广告（找人领养狗狗怎么发朋友圈说说）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-9-free-shadowrocket-node.htm" title="「10月9日」2025年最新高速Shadowrocket/SSR/V2ray/Clash免费节点链接订阅">「10月9日」2025年最新高速Shadowrocket/SSR/V2ray/Clash免费节点链接订阅</a></li>
                        <li class="py-2"><a href="/news/article-30683.htm" title="女孩十大最好专业张雪峰（女孩好学的专业）">女孩十大最好专业张雪峰（女孩好学的专业）</a></li>
                        <li class="py-2"><a href="/news/article-20926.htm" title="宠物领养网免费平台有哪些公司可以注册 宠物领养网免费平台有哪些公司可以注册的">宠物领养网免费平台有哪些公司可以注册 宠物领养网免费平台有哪些公司可以注册的</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-7-clash-windows.htm" title="「11月7日」2025年最新高速V2ray/Clash/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅机场">「11月7日」2025年最新高速V2ray/Clash/SSR/Shadowrocket免费节点链接订阅，推荐便宜订阅机场</a></li>
                        <li class="py-2"><a href="/news/article-26466.htm" title="python之pandas库的DataFrame — 数据对齐与缺失数据处理">python之pandas库的DataFrame — 数据对齐与缺失数据处理</a></li>
                        <li class="py-2"><a href="/news/article-22299.htm" title="猫咪疫苗三针多少钱一针啊（猫咪疫苗三针是什么）">猫咪疫苗三针多少钱一针啊（猫咪疫苗三针是什么）</a></li>
                        <li class="py-2"><a href="/news/article-36890.htm" title="学宠物医生报考哪个学校专科比较好考（学宠物医生上什么大专）">学宠物医生报考哪个学校专科比较好考（学宠物医生上什么大专）</a></li>
                        <li class="py-2"><a href="/news/article-23215.htm" title="动物医院叫什么名字来着 动物医院叫什么名字来着呢">动物医院叫什么名字来着 动物医院叫什么名字来着呢</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">63</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
        <div class="site-footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-12 text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p>
                        ClashNode2025订阅分享站 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <script src="/assets/website/js/frontend/clashnode2025/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/tiny-slider.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/aos.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/navbar.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/counter.js"></script>
    <script src="/assets/website/js/frontend/clashnode2025/custom.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>